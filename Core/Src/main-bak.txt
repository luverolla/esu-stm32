/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  * send welcome message
  * send command
  * -> a turn on led
  * -> s turn off led
  * -> t toggle led
  * -> b blink led with given frequency (with timers)
  * -> 1...9 for pwm led
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "hashmap.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char buf[1];
char** cmd_args;
int cmd_args_count = 0;
int cmd_len_count = 0;
char* welcome = "\r\nwelcome, please input command\r\n";
map_t* commands;
// commands
void turn_on_led(int argc, char** argv)
{
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	HAL_TIM_Base_Stop_IT(&htim10);

	// reconfiguring pin GPIOA-5 to simple output
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
	char* msg = "ok, led on\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void turn_off_led(int argc, char** argv)
{
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	HAL_TIM_Base_Stop_IT(&htim10);

	// reconfiguring pin GPIOA-5 to simple output
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	char* msg = "ok, led off\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void toggle_led(int argc, char** argv)
{
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	HAL_TIM_Base_Stop_IT(&htim10);

	// reconfiguring pin GPIOA-5 to simple output
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	char* msg = "ok, led toggled\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void blink_led(int argc, char** argv)
{
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
	HAL_TIM_Base_Start_IT(&htim10);

	// reconfiguring pin GPIOA-5 to simple output
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	char* msg = "ok, led blink started\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}

void pwm_led(int argc, char** argv)
{
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);

	// 0 = 10% and 9 = 100% duty cicle
	int input = atoi((char*)argv[1]);
	char msg[50];
	sprintf(msg, "\r\ninput is: %d\r\n", input);
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	// reconfiguring TIM2 to change pulse
	TIM_OC_InitTypeDef sConfigOC = {0};
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.Pulse = (input + 1) * 100 - 1;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
		Error_Handler();

	// reconfiguring pin GPIOA-5 to connect to PWM output
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
}

// add command below as
// void command_name() {
//		...
// }
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
/*
int main(void)
{
  /* USER CODE BEGIN 1 */
  // populating commands map
/*
  commands = map_create();
  map_insert(commands, "a", (void*)turn_on_led);
  map_insert(commands, "s", (void*)turn_off_led);
  map_insert(commands, "t", (void*)toggle_led);
  map_insert(commands, "b", (void*)blink_led);
  map_insert(commands, "p", (void*)pwm_led);

  cmd_args = (char**)calloc(20, sizeof(char*));
  for (int i = 0; i < 20; i++)
	  cmd_args[i] = (char*)calloc(20, sizeof(char));
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 // HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_USART2_UART_Init();
  //MX_TIM10_Init();
 // MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit_IT(&huart2, (uint8_t*)welcome, strlen(welcome));
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // (1)
  //{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //}
  /* USER CODE END 3 */
//}

/**
  * @brief System Clock Configuration
  * @retval None
  */
/*
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  //__HAL_RCC_PWR_CLK_ENABLE();
  //__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  //RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  //RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  //RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  //RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  //if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  //{
    //Error_Handler();
  //}

  /** Initializes the CPU, AHB and APB buses clocks
  */
  //RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              //|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  //RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  //RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 // RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  //RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  //if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  //{
    //Error_Handler();
  //}
//}

/* USER CODE BEGIN 4 */
/*
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if (huart -> Instance == USART2)
	{
		// Enter key pressed -> all command args have been written and sent
		if (*buf == '\r')
		{
			// first argument is command name
			void* cmd_fn = map_get(commands, cmd_args[0]);
			char msg[200];
			sprintf(msg, "\r\ntransmitting [%s %s]\r\n", cmd_args[0], cmd_args[1]);
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
			if (cmd_fn != NULL)
			{
				((void (*)(int, char**))cmd_fn)(cmd_args_count + 1, cmd_args);
			}

			else
			{
				char* msg = "\r\nerror, wrong command\r\n";
				HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
			}

			// resetting
			for (int i = 0; i < cmd_args_count + 1; i++)
			{
				for (int j = 0; j < strlen(cmd_args[i]); j++)
					cmd_args[i][j] = '\0';
			}
			cmd_len_count = 0;
			cmd_args_count = 0;

			HAL_UART_Transmit_IT(huart, (uint8_t*)welcome, strlen(welcome));
		}

		// Space key pressed -> previous argument completely written, starts another
		else if (*buf == 0x20)
		{
			cmd_len_count = 0;
			cmd_args_count++;
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)buf, 1);
		}

		// Backspace key entered -> do nothing, since cancellation is not implemented
		else if (*buf == '\b') {}

		// other characters -> add to command buffer and print real-time
		else
		{
			cmd_args[cmd_args_count][cmd_len_count] = *buf;
			cmd_len_count++;
			HAL_UART_Transmit_IT(&huart2, (uint8_t*)buf, 1);
		}
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart -> Instance == USART2)
    {
    	HAL_UART_Receive_IT(huart, (uint8_t*)buf, 1);
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM10)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}*/
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
/*
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 // __disable_irq();
  //while (1)
  //{
  //}
  /* USER CODE END Error_Handler_Debug */
//}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
